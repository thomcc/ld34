'use strict';
const LineSegment = require('./line_segment');
const Vec2 = require('./vec2');
const Consts = require('./constants');

class TileInfo {
	constructor(edges, tx=0, ty=0) {
		this.id = -1;
		this.edges = edges.map(({start:{x:sx, y:sy}, end:{x:ex, y:ey}}) =>
			new LineSegment(new Vec2(sx+tx, sy+ty), new Vec2(ex+tx, ey+ty)));
	}

	offsetBy(x, y) {
		return new TileInfo(this.edges, x, y);
	}
}

// function triangle(p0, p1, p2) {
// 	return new TileInfo([{start: p0, end: p1}, {start: p1, end: p2}, {start: p2, end: p0}])
// }

function polygon(...pts) {
	return new TileInfo(pts.map((pt, i) => ({start: pt.scaled(Consts.TileSize), end: pts[(i+1)%pts.length].scaled(Consts.TileSize)})));
}

function v(x, y) { return new Vec2(x, y); }

const TILE_MID = new Vec2(0.5, 0.5);

// function triTile(p0, p1, p2) {
// 	return [
// 		triangle(p0, p1, p2),
// 		triangle(p0.rotated90(TILE_MID), p1.rotated90(TILE_MID), p2.rotated90(TILE_MID)),
// 		triangle(p0.rotated180(TILE_MID), p1.rotated180(TILE_MID), p2.rotated180(TILE_MID)),
// 		triangle(p0.rotated270(TILE_MID), p1.rotated270(TILE_MID), p2.rotated270(TILE_MID))
// 	];
// }

function polyTile(...pts) {
	return [
		polygon(...pts),
		polygon(...pts.map(pt => pt.rotated90(TILE_MID))),
		polygon(...pts.map(pt => pt.rotated180(TILE_MID))),
		polygon(...pts.map(pt => pt.rotated270(TILE_MID))),
	];
}


function polyTile2S(...pts) {
	return [
		polygon(...pts),
		polygon(...pts.map(pt => pt.rotated90(TILE_MID))),
		polygon(...pts.map(pt => pt.xFlipped(0.5))),
		polygon(...pts.map(pt => pt.xFlipped(0.5).rotated90(TILE_MID))),
	];
}
function polyTile2(...pts) {
	return [
		polygon(...pts),
		polygon(...pts.map(pt => pt.rotated90(TILE_MID)))
	];
}

function polyTile2F(...pts) {
	return polyTile(...pts).concat(polyTile(...pts.map(pt => pt.xFlipped())));
}


const H = 0.5;
const Q = 0.25;
const S = 0.75;
const T = 1.0 / 3.0;
const X = 2.0 / 3.0;

const Tiles = [].concat(
	[new TileInfo([])], // empty
	[polygon(v(0, 0), v(0, 1), v(1, 1), v(1, 0))], // quad, 100% symmetry
	polyTile(v(0, 0), v(0, H), v(1, H), v(1, 0)),
	polyTile(v(0, 0), v(0, 1), v(1, 0)),
	polyTile(v(0, 0), v(0, H), v(1, 0)),
	polyTile(v(0, 0), v(1, H), v(1, 0)),
	polyTile(v(0, 0), v(0, 1), v(1, H), v(1, 0)),
	polyTile(v(0, 0), v(0, H), v(1, 1), v(1, 0))
	,

	polyTile(v(0, H), v(1, H), v(1, 0)),
	polyTile(v(0, 0), v(0, H), v(1, H)),
	polyTile(v(0, 0), v(H, 0), v(0, H)),
	polyTile(v(0, 0), v(0, H), v(H, H), v(H, 0)),

	polyTile2S(v(0, 0), v(H, 1), v(1, 1), v(H, 0)),

	polyTile2(v(0, 0), v(0, H), v(H, 1), v(1, 1), v(1, H), v(H, 0)),
	polyTile(v(0, 0), v(0, 1), v(H, 1), v(H, H), v(1, H), v(1, 0))
	// polyTile(v(0, 0), v(0, 1), v(H, 1), v(1, H), v(1, 0)),
	// polyTile2F(v(0, 0), v(0, 1), v(1, 1), v(H, H), v(H, 0))

);


const TestLevel = {
	width: 30,
	height: 30,
	spawnX: 3,
	spawnY: 2,
	tiles: [
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,6,0,0,19,1,1,1,1,18,2,2,2,2,2,2,2,10,0,0,0,14,1,1,18,10,0,0,7,1,
1,0,0,0,11,1,1,1,1,0,12,4,0,4,4,0,2,34,0,12,4,20,1,6,0,0,0,0,0,1,
1,0,0,0,0,19,1,1,1,0,7,1,0,1,1,0,2,34,15,25,0,19,25,0,0,0,12,4,0,1,
1,0,0,0,0,0,0,0,7,13,0,1,0,1,1,0,2,34,3,5,0,3,17,0,0,15,17,0,0,1,
1,56,57,58,59,0,1,9,0,0,15,1,0,1,1,0,2,34,3,5,0,3,0,0,0,3,0,0,0,1,
1,9,0,0,0,8,1,1,1,1,1,1,0,1,1,0,2,34,3,5,0,11,0,13,0,3,10,12,4,1,
1,1,1,1,1,1,1,1,1,1,1,18,0,1,1,0,2,34,11,21,0,0,12,17,0,3,0,0,0,1,
1,1,25,0,0,0,0,0,0,0,0,0,12,1,1,0,2,34,0,14,2,2,10,0,0,3,0,12,4,1,
1,1,5,0,0,0,1,1,1,1,1,1,1,1,1,0,2,34,0,0,0,0,0,0,0,23,0,0,0,1,
1,1,21,0,0,15,1,1,1,1,1,1,1,1,1,0,1,1,17,0,0,0,0,0,15,25,0,0,0,1,
1,1,1,21,0,23,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,23,17,0,0,0,1,
1,1,1,1,0,22,1,1,1,1,1,1,1,1,1,0,19,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,10,0,19,0,0,0,0,0,0,14,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,11,1,
1,0,0,3,0,8,1,1,1,24,0,1,1,1,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
1,0,0,23,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,9,0,0,0,0,0,1,
1,0,20,18,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,21,0,23,1,1,1,
1,9,0,0,0,7,1,1,1,1,0,1,1,1,1,1,17,0,0,0,0,0,11,1,25,0,19,1,1,1,
1,1,1,1,13,0,1,1,1,10,0,14,1,1,1,1,0,8,1,1,1,21,0,0,0,0,0,0,1,1,
1,1,1,1,21,0,1,1,1,0,0,0,1,1,1,1,0,1,1,1,1,6,0,0,0,0,0,0,1,1,
1,1,1,1,25,0,1,1,1,16,0,12,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,1,1,
1,1,1,1,17,15,1,1,1,1,1,1,1,1,1,1,0,0,7,1,1,24,16,0,0,0,0,0,1,1,
1,1,1,1,0,23,1,1,1,1,1,1,1,1,1,1,1,21,0,1,1,1,1,24,16,0,0,8,1,1,
1,1,1,1,0,22,1,1,1,6,0,0,0,0,0,0,0,0,8,1,1,1,1,1,1,0,0,1,1,1,
1,1,1,1,9,0,0,0,0,8,1,1,1,1,1,1,1,18,22,1,1,1,1,1,1,0,0,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,14,22,22,22,22,22,0,0,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,8,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,13,0,12,20,20,20,20,20,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1

	/*
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,6,0,0,19,1,1,1,1,18,2,2,2,2,2,2,2,10,0,0,0,14,1,1,18,10,0,0,7,1,
1,0,0,0,11,1,1,1,1,0,12,4,0,4,4,0,2,10,0,12,4,20,1,6,0,0,0,0,0,1,
1,0,0,0,0,19,1,1,1,0,7,1,0,1,1,0,2,10,15,25,0,19,25,0,0,0,12,4,0,1,
1,0,0,0,0,0,0,0,7,13,0,1,0,1,1,0,2,10,3,5,0,3,17,0,0,15,17,0,0,1,
1,0,0,0,0,0,1,9,0,0,15,1,0,1,1,0,2,10,3,5,0,3,0,0,0,3,0,0,0,1,
1,9,0,0,0,8,1,1,1,1,1,1,0,1,1,0,2,10,3,5,0,11,0,13,0,3,10,12,4,1,
1,1,1,1,1,1,1,1,1,1,1,18,0,1,1,0,2,10,11,21,0,0,12,17,0,3,0,0,0,1,
1,1,25,0,0,0,0,0,0,0,0,0,12,1,1,0,2,10,0,14,2,2,10,0,0,3,0,12,4,1,
1,1,5,0,0,0,1,1,1,1,1,1,1,1,1,0,2,10,0,0,0,0,0,0,0,23,0,0,0,1,
1,1,21,0,0,15,1,1,1,1,1,1,1,1,1,0,1,1,17,0,0,0,0,0,15,25,0,0,0,1,
1,1,1,21,0,23,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,23,17,0,0,0,1,
1,1,1,1,0,22,1,1,1,1,1,1,1,1,1,0,19,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,10,0,19,0,0,0,0,0,0,14,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,11,1,
1,0,0,3,0,8,1,1,1,24,0,1,1,1,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
1,0,0,23,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,9,0,0,0,0,0,1,
1,0,20,18,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,21,0,23,1,1,1,
1,9,0,0,0,7,1,1,1,1,0,1,1,1,1,1,17,0,0,0,0,0,11,1,25,0,19,1,1,1,
1,1,1,1,13,0,1,1,1,10,0,14,1,1,1,1,0,8,1,1,1,21,0,0,0,0,0,0,1,1,
1,1,1,1,21,0,1,1,1,0,0,0,1,1,1,1,0,1,1,1,1,6,0,0,0,0,0,0,1,1,
1,1,1,1,25,0,1,1,1,16,0,12,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,1,1,
1,1,1,1,17,15,1,1,1,1,1,1,1,1,1,1,0,0,7,1,1,24,16,0,0,0,0,0,1,1,
1,1,1,1,0,23,1,1,1,1,1,1,1,1,1,1,1,21,0,1,1,1,1,24,16,0,0,8,1,1,
1,1,1,1,0,22,1,1,1,6,0,0,0,0,0,0,0,0,8,1,1,1,1,1,1,0,0,1,1,1,
1,1,1,1,9,0,0,0,0,8,1,1,1,1,1,1,1,18,22,1,1,1,1,1,1,0,0,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,14,22,22,22,22,22,0,0,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,8,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,13,0,12,20,20,20,20,20,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1*/
]
}

exports.TestLevel = TestLevel;

exports.Tiles = Tiles;
exports.TileInfo = TileInfo;

